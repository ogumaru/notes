"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[938],{3964:n=>{n.exports=JSON.parse('{"blogPosts":[{"id":"/2022/08/13/proxy-prisma-records","metadata":{"permalink":"/notes/2022/08/13/proxy-prisma-records","source":"@site/blog/2022-08-13-proxy-prisma-records/index.md","title":"\u3010JavaScript\u3011Prisma\u306e\u5358\u7d14\u306a\u30ec\u30b3\u30fc\u30c9\u3092\u5024\u306e\u914d\u5217\u3068\u3057\u3066\u53d6\u5f97\u3059\u308b","description":"\u6982\u8981","date":"2022-08-13T00:00:00.000Z","formattedDate":"2022\u5e748\u670813\u65e5","tags":[{"label":"javascript","permalink":"/notes/tags/javascript"},{"label":"prisma","permalink":"/notes/tags/prisma"}],"readingTime":2.66,"hasTruncateMarker":false,"authors":[{"name":"ogumaru","title":"ogumaru note owner","url":"https://github.com/ogumaru","imageURL":"https://github.com/ogumaru.png","key":"ogumaru"}],"frontMatter":{"title":"\u3010JavaScript\u3011Prisma\u306e\u5358\u7d14\u306a\u30ec\u30b3\u30fc\u30c9\u3092\u5024\u306e\u914d\u5217\u3068\u3057\u3066\u53d6\u5f97\u3059\u308b","authors":"ogumaru","tags":["javascript","prisma"]},"nextItem":{"title":"\u3010JavaScript\u3011\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u3067\u306a\u3044\u5024\u3092\u6301\u3064Set\u306b\u3066\u91cd\u8907\u304c\u767a\u751f\u3059\u308b","permalink":"/notes/2022/07/18/duplicated-value-in-set"}},"content":"## \u6982\u8981\\n\\nPrisma \u3092\u5229\u7528\u3057\u3066\u3001 1:N \u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u6301\u3064\u5358\u7d14\u306a\u30ec\u30b3\u30fc\u30c9\u306e\u5024\u3092\u914d\u5217\u3068\u3057\u3066\u53d6\u5f97\u3059\u308b\u3002\\n\\n## \u7d50\u8ad6\\n\\n`Proxy`\u3092\u5229\u7528\u3059\u308b\u3002\\n\\n## \u5b9f\u884c\u74b0\u5883\\n\\n| \u5b9f\u884c\u74b0\u5883       | \u30d0\u30fc\u30b8\u30e7\u30f3 |\\n| -------------- | ---------- |\\n| node           | v16.15.0   |\\n| prisma         | 4.2.1      |\\n| @prisma/client | 4.2.1      |\\n\\n## \u3084\u308a\u305f\u3044\u3053\u3068\\n\\n![Leaves\u3068Branches\u306eER\u56f3](mermaid-diagram-2022-08-13-123036.svg \\"\u5358\u7d14\u306a1:N\u306eER\u56f3\\")\\n\\n<details>\\n<summary>schema.prisma</summary>\\n\\n```prisma\\ngenerator client {\\n  provider = \\"prisma-client-js\\"\\n}\\n\\ndatasource db {\\n  provider = \\"sqlite\\"\\n  url      = env(\\"DATABASE_URL\\")\\n}\\n\\nmodel Branches {\\n  id     Int      @id @default(autoincrement())\\n  leaves Leaves[]\\n}\\n\\nmodel Leaves {\\n  id       Int      @id @default(autoincrement())\\n  branch   Branches @relation(fields: [branchId], references: [id])\\n  branchId Int\\n  value    String\\n}\\n```\\n\\n</details>\\n\\n\u4e0a\u56f3\u306e\u5358\u7d14\u306a `Branches`:`Leaves` = 1:N \u3068\u306a\u308b\u30c6\u30fc\u30d6\u30eb\u306b\u5bfe\u3057\u3066\u3001Prisma \u3067\u53d6\u5f97\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3001\\n\\n```javascript\\nconsole.log(branches.leaves)\\n> [\\"hoge\\", \\"huga\\", ...]\\n```\\n\\n\u306e\u3088\u3046\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u30a2\u30af\u30bb\u30b9\u3067\u5b50\u3068\u306a\u308b\u30ec\u30b3\u30fc\u30c9\u306e\u5024\u306e\u307f\u3092\u53d6\u5f97\u3057\u305f\u3044\u3002\\n\\n## \u5b9f\u969b\u306e\u6319\u52d5\\n\\nPrisma \u3067\u306f\u30ec\u30b3\u30fc\u30c9\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u306a\u308b\u3002\\n\\n```typescript\\nconst select = async () => {\\n  const branch = await prisma.branches.findFirstOrThrow({\\n    include: { leaves: true },\\n  });\\n  return branch;\\n};\\n```\\n\\n\u3068\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306a\u5f62\u3067\u30ec\u30b3\u30fc\u30c9\u304c\u8fd4\u3055\u308c\u308b\u3002\\n\\n```json\\n{\\n  \\"id\\": 1,\\n  \\"leaves\\": [\\n    {\\n      \\"id\\": 1,\\n      \\"branchId\\": 1,\\n      \\"value\\": \\"hoge\\"\\n    },\\n    {\\n      \\"id\\": 2,\\n      \\"branchId\\": 1,\\n      \\"value\\": \\"huga\\"\\n    }\\n  ]\\n}\\n```\\n\\n## Proxy \u3092\u5229\u7528\u3057\u305f\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\\n\\n`leaves`\u306b\u5bfe\u3059\u308b\u30a2\u30af\u30bb\u30b9\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u51e6\u7406\u3059\u308b\u3068\u5024\u306e\u914d\u5217\u3068\u3057\u3066\u53d6\u5f97\u3067\u304d\u308b\u3002\\n\\n```typescript\\ninterface ILeaf {\\n  id: number;\\n  value: string;\\n}\\n\\ninterface IBranch {\\n  id: number;\\n  leaves: Array<ILeaf>;\\n}\\n\\nconst select = async () => {\\n  const proxy: ProxyHandler<IBranch> = {\\n    get: (obj, prop) => {\\n      if (prop === \\"leaves\\") {\\n        return obj.leaves.map((leaf) => leaf.value);\\n      } else {\\n        if (Object.hasOwn(obj, prop)) {\\n          return obj[prop as keyof IBranch];\\n        } else {\\n          return undefined;\\n        }\\n      }\\n    },\\n  };\\n  const branch = await prisma.branches.findFirstOrThrow({\\n    include: { leaves: true },\\n  });\\n  return new Proxy(branch, proxy);\\n};\\n```\\n\\n`leaves`\u306f\u5358\u7d14\u306a\u5024\u306e\u914d\u5217\u3068\u306a\u308b\u3002\\n\\n```json\\n{\\n  \\"id\\": 1,\\n  \\"leaves\\": [\\"hoge\\", \\"huga\\"]\\n}\\n```\\n\\n## \u7559\u610f\u70b9\\n\\n\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u306b\u3059\u308b\u3082\u306e\u3067\u306f\u306a\u3044\u305f\u3081\u3001\u5024\u306e\u66f4\u65b0\u3092\u3059\u308b\u5834\u5408\u306b\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3002\\n\\n```javascript\\nconst records = {\\n  private: [\\n    { id: 0, value: \\"secret\\" },\\n    { id: 1, value: \\"keys\\" },\\n  ],\\n};\\n\\nconst proxy = {\\n  get: (obj, prop) => {\\n    if (prop === \\"private\\") {\\n      return obj[prop].map((record) => record.value);\\n    } else {\\n      return obj[prop];\\n    }\\n  },\\n};\\nconst proxied = new Proxy(records, proxy);\\n\\nconsole.log(proxied.private);\\n// > [ { id: 0, value: \'secret\' }, { id: 1, value: \'keys\' } ]\\n\\nproxied.private = [\\"hoge\\", \\"huga\\"];\\n\\nconsole.log(proxied.private);\\n// > [ undefined, undefined ]\\n```"},{"id":"/2022/07/18/duplicated-value-in-set","metadata":{"permalink":"/notes/2022/07/18/duplicated-value-in-set","source":"@site/blog/2022-07-18-duplicated-value-in-set.md","title":"\u3010JavaScript\u3011\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u3067\u306a\u3044\u5024\u3092\u6301\u3064Set\u306b\u3066\u91cd\u8907\u304c\u767a\u751f\u3059\u308b","description":"\u6982\u8981","date":"2022-07-18T00:00:00.000Z","formattedDate":"2022\u5e747\u670818\u65e5","tags":[{"label":"javascript","permalink":"/notes/tags/javascript"},{"label":"python","permalink":"/notes/tags/python"}],"readingTime":4.295,"hasTruncateMarker":false,"authors":[{"name":"ogumaru","title":"ogumaru note owner","url":"https://github.com/ogumaru","imageURL":"https://github.com/ogumaru.png","key":"ogumaru"}],"frontMatter":{"title":"\u3010JavaScript\u3011\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u3067\u306a\u3044\u5024\u3092\u6301\u3064Set\u306b\u3066\u91cd\u8907\u304c\u767a\u751f\u3059\u308b","authors":"ogumaru","tags":["javascript","python"]},"prevItem":{"title":"\u3010JavaScript\u3011Prisma\u306e\u5358\u7d14\u306a\u30ec\u30b3\u30fc\u30c9\u3092\u5024\u306e\u914d\u5217\u3068\u3057\u3066\u53d6\u5f97\u3059\u308b","permalink":"/notes/2022/08/13/proxy-prisma-records"}},"content":"## \u6982\u8981\\n\\nTypeScript \u306b\u3066\u3001\u30bf\u30d7\u30eb\u98a8(`[T, T]`)\u306e\u914d\u5217\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u3042\u308a\u3001\u3053\u308c\u306e\u4e2d\u8eab\u3092\u30e6\u30cb\u30fc\u30af\u306b\u3057\u305f\u3044\u5834\u9762\u304c\u3042\u3063\u305f\u3002\\n\\n`Set`\u3092\u7d4c\u7531\u3059\u308c\u3070\u91cd\u8907\u6392\u9664\u3067\u304d\u308b\u3068\u601d\u3063\u305f\u304c\u3001\u898b\u305f\u76ee\u4e0a\u540c\u3058\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u91cd\u8907\u306f\u6392\u9664\u3055\u308c\u306a\u304b\u3063\u305f\u3002\\n\\n## \u7d50\u8ad6\\n\\nJavaScript \u306b\u304a\u3051\u308b\u914d\u5217\u306e\u540c\u5024\u6bd4\u8f03\u304c`false`\u306b\u306a\u308b\u305f\u3081\u3002\\n\\n\u53b3\u5bc6\u306b\u30e6\u30cb\u30fc\u30af\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306f\u3001deepEqual \u76f8\u5f53\u306e\u78ba\u8a8d\u304c\u5fc5\u8981\u305d\u3046\u3002\\n\\n## \u5b9f\u884c\u74b0\u5883\\n\\n| \u5b9f\u884c\u74b0\u5883 | \u30d0\u30fc\u30b8\u30e7\u30f3      |\\n| ------------- | --------------------- |\\n| node        | v16.15.0            |\\n| python3  | Python 3.10.4 |\\n\\n## JavaScript \u306e\u6319\u52d5\u3068 Python \u3068\u306e\u6bd4\u8f03\\n\\n\u30bf\u30d7\u30eb\u98a8\u306e\u914d\u5217\u30ea\u30c6\u30e9\u30eb\u3092`add`\u3059\u308b\u3068\u3001\u91cd\u8907\u3057\u305f\u5024\u304c\u305d\u308c\u305e\u308c\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3057\u307e\u3046\u3002\\n\\n```javascript\\nconst unique = new Set();\\nunique.add([\\"hoge\\", \\"huga\\"]);\\n// Set(1) { [ \'hoge\', \'huga\' ] }\\nunique.add([\\"hoge\\", \\"huga\\"]);\\n// Set(2) { [ \'hoge\', \'huga\' ], [ \'hoge\', \'huga\' ] }\\n```\\n\\nPython \u3067\u306f\u3067\u304d\u305f\u6c17\u304c\u3057\u305f\u306e\u3067\u78ba\u8a8d\u3059\u308b\u3002\\n\\n(\u306a\u304a`[\\"hoge\\", \\"huga\\"]`\u306f`Hashable`\u3067\u306a\u3044\u305f\u3081`set`\u306b\u306f\u8ffd\u52a0\u3067\u304d\u306a\u3044)\\n\\n```python\\nunique = set()\\nunique.add((\\"hoge\\", \\"huga\\"))\\n# {(\'hoge\', \'huga\')}\\nunique.add((\\"hoge\\", \\"huga\\"))\\n# {(\'hoge\', \'huga\')}\\n```\\n\\n\u30ea\u30c6\u30e9\u30eb\u306e\u30bf\u30d7\u30eb\u306b\u5bfe\u3057\u3066\u91cd\u8907\u6392\u9664\u304c\u3067\u304d\u3066\u3044\u308b\u3002\\n\\nJavaScript \u3067\u3082\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u540c\u4e00\u306b\u306a\u308b\u305f\u3081\u3001\u4e0b\u8a18\u3067\u306f\u610f\u56f3\u3057\u305f\u901a\u308a\u306b\u91cd\u8907\u304c\u6392\u9664\u3055\u308c\u308b\u3002\\n\\n```javascript\\nconst unique = new Set();\\nconst tuple = [\\"hoge\\", \\"huga\\"];\\nunique.add(tuple);\\n// Set(1) { [ \'hoge\', \'huga\' ] }\\nunique.add(tuple);\\n// Set(1) { [ \'hoge\', \'huga\' ] }\\n```\\n\\nJavaScript \u3067\u306f Python \u306b\u304a\u3051\u308b\u30bf\u30d7\u30eb\u76f8\u5f53\u306e\u30c7\u30fc\u30bf\u578b\u304c\u306a\u3044\u305f\u3081\u3001\u4e0a\u8a18\u30b3\u30fc\u30c9\u3067\u306f\u5b9f\u969b\u306b\u306f\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u914d\u5217\u3068\u306a\u308b\u3002\\n\\n`Object.freeze()`\u3067\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306b\u3057\u3066\u307f\u305f\u304c\u3001\u7d50\u679c\u306f\u5909\u308f\u3089\u306a\u304b\u3063\u305f\u3002\\n\\n```javascript\\nconst unique = new Set();\\nunique.add(Object.freeze([\\"hoge\\", \\"huga\\"]));\\n// Set(1) { [ \'hoge\', \'huga\' ] }\\nunique.add(Object.freeze([\\"hoge\\", \\"huga\\"]));\\n// Set(2) { [ \'hoge\', \'huga\' ], [ \'hoge\', \'huga\' ] }\\n```\\n\\n## \u4ed5\u69d8\u306e\u78ba\u8a8d\\n\\nMDN \u306e`Set`\u306e\u30da\u30fc\u30b8\u3092\u898b\u308b\u3068\u3001`-0`\u3068`+0`\u306b\u3064\u3044\u3066\u89e6\u308c\u3089\u308c\u3066\u3044\u308b\u3002\\n\\n> See \\"Key equality for -0 and 0\\" in the browser compatibility table for details.\\n\\n[Set - JavaScript | MDN (developer.mozilla.org)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#value_equality)\\n\\n\u7b49\u4fa1\u6bd4\u8f03\u306e\u30da\u30fc\u30b8\u3092\u898b\u308b\u3068\u3001\\n\\n> SameValueZero: used by %TypedArray% and ArrayBuffer constructors, as well as Map and Set operations, and also String.prototype.includes and Array.prototype.includes since ES2016\\n\\n[Equality comparisons and sameness - JavaScript | MDN (developer.mozilla.org)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness)\\n\\n`SameValueZero`\u306e TC39 \u3078\u30ea\u30f3\u30af\u3055\u308c\u3066\u3044\u305f\u306e\u3067\u3053\u3061\u3089\u3082\u78ba\u8a8d\u3002\\n\\n> SameValueZero differs from SameValue only in that it treats +0\ud835\udd3d and -0\ud835\udd3d as equivalent.\\n\\n[SameValueZero | ECMAScript\xae 2023 Language\xa0Specification (tc39.es)](https://tc39.es/ecma262/#sec-samevaluezero)\\n\\n`SameValue`\u3068`+0`\u3068`-0`\u306e\u6bd4\u8f03\u7d50\u679c\u306e\u307f\u7570\u306a\u308b\u3068\u3042\u308b\u305f\u3081\u3001[`SameValue`](https://tc39.es/ecma262/#sec-samevalue)\u3092\u78ba\u8a8d\u3059\u308b\u3068\u3001\\n\\n> 1. If Type(x) is different from Type(y), return false.\\n> 2. If Type(x) is Number, then\\n>\\n>    a. Return Number::sameValue(x, y).\\n>\\n> 3. If Type(x) is BigInt, then\\n>\\n>    a. Return BigInt::sameValue(x, y).\\n>\\n> 4. Return SameValueNonNumeric(x, y).\\n\\n\u3068\u306e\u3053\u3068\u306a\u306e\u3067[`SameValueNonNumeric`](https://tc39.es/ecma262/#sec-samevaluenonnumeric)\u3092\u78ba\u8a8d\u3002\\n\\n> 1. Assert: Type(x) is the same as Type(y).\\n> 2. If Type(x) is Undefined, return true.\\n> 3. If Type(x) is Null, return true.\\n> 4. If Type(x) is String, then\\n>\\n>    a. If x and y are exactly the same sequence of code units (same length and same code units at corresponding indices), return true; otherwise, return false.\\n>\\n> 5. If Type(x) is Boolean, then\\n>\\n>    a. If x and y are both true or both false, return true; otherwise, return false.\\n>\\n> 6. If Type(x) is Symbol, then\\n>\\n>    a. If x and y are both the same Symbol value, return true; otherwise, return false.\\n>\\n> 7. If x and y are the same Object value, return true. Otherwise, return false.\\n\\n\u30bf\u30d7\u30eb\u306e\u5834\u5408`7`\u306b\u3066\u8a55\u4fa1\u3055\u308c\u308b\u3068\u601d\u308f\u308c\u3001`same Object value`\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u3088\u3046\u3060\u3002\\n\\n## same Object value \u3068\u306f\\n\\nTC39\u306b\u306f\u3053\u308c\u4ee5\u4e0a\u306e\u30ea\u30f3\u30af\u304c\u306a\u304b\u3063\u305f\u304c\u3001deepEqual\u76f8\u5f53\u306e\u6bd4\u8f03\u3092\u884c\u3046\u3053\u3068\u3067\u91cd\u8907\u306e\u78ba\u8a8d\u306f\u3067\u304d\u305d\u3046\u3002\\n\\n\u4fee\u6b63 PR \u3044\u305f\u3060\u3051\u308b\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002"}]}')}}]);